// Generated from ./src/ANTLR/NameStringExpressionGrammar.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class NameStringExpressionGrammarLexer extends Lexer {
	public static readonly DOLLAR = 1;
	public static readonly MINUS = 2;
	public static readonly PLUS = 3;
	public static readonly STAR = 4;
	public static readonly DIV = 5;
	public static readonly MODULO = 6;
	public static readonly OPEN_PARENS = 7;
	public static readonly CLOSE_PARENS = 8;
	public static readonly COMMA = 9;
	public static readonly DOT = 10;
	public static readonly OPEN_BRACKET = 11;
	public static readonly CLOSE_BRACKET = 12;
	public static readonly UNDERSCORE = 13;
	public static readonly AND = 14;
	public static readonly OR = 15;
	public static readonly NOT = 16;
	public static readonly TRUE = 17;
	public static readonly FALSE = 18;
	public static readonly GT = 19;
	public static readonly GE = 20;
	public static readonly LT = 21;
	public static readonly LE = 22;
	public static readonly EQ = 23;
	public static readonly NEQ = 24;
	public static readonly WhiteSpace = 25;
	public static readonly IDENTIFIER = 26;
	public static readonly STRING = 27;
	public static readonly UNSIGNED_INTEGER = 28;
	public static readonly UNSIGNED_NUMBER = 29;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"DOLLAR", "MINUS", "PLUS", "STAR", "DIV", "MODULO", "OPEN_PARENS", "CLOSE_PARENS", 
		"COMMA", "DOT", "OPEN_BRACKET", "CLOSE_BRACKET", "UNDERSCORE", "AND", 
		"OR", "NOT", "TRUE", "FALSE", "GT", "GE", "LT", "LE", "EQ", "NEQ", "WhiteSpace", 
		"IDENTIFIER", "STRING", "UNSIGNED_INTEGER", "UNSIGNED_NUMBER", "Exponent", 
		"DigitCharacter", "LetterCharacter", "IdentifierOrKeyword", "IdentifierStartCharacter", 
		"IdentifierPartCharacter",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'$'", "'-'", "'+'", "'*'", "'/'", "'%'", "'('", "')'", "','", 
		"'.'", "'['", "']'", "'_'", "'&&'", "'||'", "'!'", undefined, undefined, 
		"'>'", "'>='", "'<'", "'<='", "'=='", "'!='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "DOLLAR", "MINUS", "PLUS", "STAR", "DIV", "MODULO", "OPEN_PARENS", 
		"CLOSE_PARENS", "COMMA", "DOT", "OPEN_BRACKET", "CLOSE_BRACKET", "UNDERSCORE", 
		"AND", "OR", "NOT", "TRUE", "FALSE", "GT", "GE", "LT", "LE", "EQ", "NEQ", 
		"WhiteSpace", "IDENTIFIER", "STRING", "UNSIGNED_INTEGER", "UNSIGNED_NUMBER",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(NameStringExpressionGrammarLexer._LITERAL_NAMES, NameStringExpressionGrammarLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return NameStringExpressionGrammarLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(NameStringExpressionGrammarLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "NameStringExpressionGrammar.g4"; }

	// @Override
	public get ruleNames(): string[] { return NameStringExpressionGrammarLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return NameStringExpressionGrammarLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return NameStringExpressionGrammarLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return NameStringExpressionGrammarLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1F\xE2\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03" +
		"\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03" +
		"\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12t\n\x12\x03\x13\x03" +
		"\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05" +
		"\x13\x80\n\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16" +
		"\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x05\x1A\x96\n\x1A\x03\x1A\x03\x1A\x03" +
		"\x1B\x03\x1B\x03\x1C\x03\x1C\x07\x1C\x9E\n\x1C\f\x1C\x0E\x1C\xA1\v\x1C" +
		"\x03\x1C\x03\x1C\x03\x1C\x07\x1C\xA6\n\x1C\f\x1C\x0E\x1C\xA9\v\x1C\x03" +
		"\x1C\x05\x1C\xAC\n\x1C\x03\x1D\x06\x1D\xAF\n\x1D\r\x1D\x0E\x1D\xB0\x03" +
		"\x1E\x06\x1E\xB4\n\x1E\r\x1E\x0E\x1E\xB5\x03\x1E\x03\x1E\x06\x1E\xBA\n" +
		"\x1E\r\x1E\x0E\x1E\xBB\x03\x1E\x05\x1E\xBF\n\x1E\x05\x1E\xC1\n\x1E\x03" +
		"\x1E\x05\x1E\xC4\n\x1E\x03\x1F\x03\x1F\x05\x1F\xC8\n\x1F\x03\x1F\x06\x1F" +
		"\xCB\n\x1F\r\x1F\x0E\x1F\xCC\x03 \x03 \x03!\x03!\x03\"\x03\"\x07\"\xD5" +
		"\n\"\f\"\x0E\"\xD8\v\"\x03#\x03#\x05#\xDC\n#\x03$\x03$\x03$\x05$\xE1\n" +
		"$\x04\x9F\xA7\x02\x02%\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v" +
		"\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
		"\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14" +
		"\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02" +
		"\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02\x02?\x02\x02A\x02\x02C\x02\x02E\x02" +
		"\x02G\x02\x02\x03\x02\x06\x04\x02\f\f\x0F\x0F\x04\x02--//\x03\x022;\x05" +
		"\x02C\\c|\u0412\u0501\x02\xEE\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02" +
		"\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02" +
		"\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02" +
		"\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02" +
		"\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02" +
		"\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02" +
		"\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+" +
		"\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02" +
		"\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02" +
		"\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x03I\x03\x02\x02\x02\x05K\x03" +
		"\x02\x02\x02\x07M\x03\x02\x02\x02\tO\x03\x02\x02\x02\vQ\x03\x02\x02\x02" +
		"\rS\x03\x02\x02\x02\x0FU\x03\x02\x02\x02\x11W\x03\x02\x02\x02\x13Y\x03" +
		"\x02\x02\x02\x15[\x03\x02\x02\x02\x17]\x03\x02\x02\x02\x19_\x03\x02\x02" +
		"\x02\x1Ba\x03\x02\x02\x02\x1Dc\x03\x02\x02\x02\x1Ff\x03\x02\x02\x02!i" +
		"\x03\x02\x02\x02#s\x03\x02\x02\x02%\x7F\x03\x02\x02\x02\'\x81\x03\x02" +
		"\x02\x02)\x83\x03\x02\x02\x02+\x86\x03\x02\x02\x02-\x88\x03\x02\x02\x02" +
		"/\x8B\x03\x02\x02\x021\x8E\x03\x02\x02\x023\x95\x03\x02\x02\x025\x99\x03" +
		"\x02\x02\x027\xAB\x03\x02\x02\x029\xAE\x03\x02\x02\x02;\xB3\x03\x02\x02" +
		"\x02=\xC5\x03\x02\x02\x02?\xCE\x03\x02\x02\x02A\xD0\x03\x02\x02\x02C\xD2" +
		"\x03\x02\x02\x02E\xDB\x03\x02\x02\x02G\xE0\x03\x02\x02\x02IJ\x07&\x02" +
		"\x02J\x04\x03\x02\x02\x02KL\x07/\x02\x02L\x06\x03\x02\x02\x02MN\x07-\x02" +
		"\x02N\b\x03\x02\x02\x02OP\x07,\x02\x02P\n\x03\x02\x02\x02QR\x071\x02\x02" +
		"R\f\x03\x02\x02\x02ST\x07\'\x02\x02T\x0E\x03\x02\x02\x02UV\x07*\x02\x02" +
		"V\x10\x03\x02\x02\x02WX\x07+\x02\x02X\x12\x03\x02\x02\x02YZ\x07.\x02\x02" +
		"Z\x14\x03\x02\x02\x02[\\\x070\x02\x02\\\x16\x03\x02\x02\x02]^\x07]\x02" +
		"\x02^\x18\x03\x02\x02\x02_`\x07_\x02\x02`\x1A\x03\x02\x02\x02ab\x07a\x02" +
		"\x02b\x1C\x03\x02\x02\x02cd\x07(\x02\x02de\x07(\x02\x02e\x1E\x03\x02\x02" +
		"\x02fg\x07~\x02\x02gh\x07~\x02\x02h \x03\x02\x02\x02ij\x07#\x02\x02j\"" +
		"\x03\x02\x02\x02kl\x07V\x02\x02lm\x07T\x02\x02mn\x07W\x02\x02nt\x07G\x02" +
		"\x02op\x07v\x02\x02pq\x07t\x02\x02qr\x07w\x02\x02rt\x07g\x02\x02sk\x03" +
		"\x02\x02\x02so\x03\x02\x02\x02t$\x03\x02\x02\x02uv\x07H\x02\x02vw\x07" +
		"C\x02\x02wx\x07N\x02\x02xy\x07U\x02\x02y\x80\x07G\x02\x02z{\x07h\x02\x02" +
		"{|\x07c\x02\x02|}\x07n\x02\x02}~\x07u\x02\x02~\x80\x07g\x02\x02\x7Fu\x03" +
		"\x02\x02\x02\x7Fz\x03\x02\x02\x02\x80&\x03\x02\x02\x02\x81\x82\x07@\x02" +
		"\x02\x82(\x03\x02\x02\x02\x83\x84\x07@\x02\x02\x84\x85\x07?\x02\x02\x85" +
		"*\x03\x02\x02\x02\x86\x87\x07>\x02\x02\x87,\x03\x02\x02\x02\x88\x89\x07" +
		">\x02\x02\x89\x8A\x07?\x02\x02\x8A.\x03\x02\x02\x02\x8B\x8C\x07?\x02\x02" +
		"\x8C\x8D\x07?\x02\x02\x8D0\x03\x02\x02\x02\x8E\x8F\x07#\x02\x02\x8F\x90" +
		"\x07?\x02\x02\x902\x03\x02\x02\x02\x91\x96\x07\"\x02\x02\x92\x93\x07\x0F" +
		"\x02\x02\x93\x96\x07\f\x02\x02\x94\x96\t\x02\x02\x02\x95\x91\x03\x02\x02" +
		"\x02\x95\x92\x03\x02\x02\x02\x95\x94\x03\x02\x02\x02\x96\x97\x03\x02\x02" +
		"\x02\x97\x98\b\x1A\x02\x02\x984\x03\x02\x02\x02\x99\x9A\x05C\"\x02\x9A" +
		"6\x03\x02\x02\x02\x9B\x9F\x07$\x02\x02\x9C\x9E\v\x02\x02\x02\x9D\x9C\x03" +
		"\x02\x02\x02\x9E\xA1\x03\x02\x02\x02\x9F\xA0\x03\x02\x02\x02\x9F\x9D\x03" +
		"\x02\x02\x02\xA0\xA2\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA2\xAC\x07" +
		"$\x02\x02\xA3\xA7\x07)\x02\x02\xA4\xA6\v\x02\x02\x02\xA5\xA4\x03\x02\x02" +
		"\x02\xA6\xA9\x03\x02\x02\x02\xA7\xA8\x03\x02\x02\x02\xA7\xA5\x03\x02\x02" +
		"\x02\xA8\xAA\x03\x02\x02\x02\xA9\xA7\x03\x02\x02\x02\xAA\xAC\x07)\x02" +
		"\x02\xAB\x9B\x03\x02\x02\x02\xAB\xA3\x03\x02\x02\x02\xAC8\x03\x02\x02" +
		"\x02\xAD\xAF\x05? \x02\xAE\xAD\x03\x02\x02\x02\xAF\xB0\x03\x02\x02\x02" +
		"\xB0\xAE\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1:\x03\x02\x02\x02" +
		"\xB2\xB4\x05? \x02\xB3\xB2\x03\x02\x02\x02\xB4\xB5\x03\x02\x02\x02\xB5" +
		"\xB3\x03\x02\x02\x02\xB5\xB6\x03\x02\x02\x02\xB6\xC3\x03\x02\x02\x02\xB7" +
		"\xB9\x05\x15\v\x02\xB8\xBA\x05? \x02\xB9\xB8\x03\x02\x02\x02\xBA\xBB\x03" +
		"\x02\x02\x02\xBB\xB9\x03\x02\x02\x02\xBB\xBC\x03\x02\x02\x02\xBC\xBE\x03" +
		"\x02\x02\x02\xBD\xBF\x05=\x1F\x02\xBE\xBD\x03\x02\x02\x02\xBE\xBF\x03" +
		"\x02\x02\x02\xBF\xC1\x03\x02\x02\x02\xC0\xB7\x03\x02\x02\x02\xC0\xC1\x03" +
		"\x02\x02\x02\xC1\xC4\x03\x02\x02\x02\xC2\xC4\x05=\x1F\x02\xC3\xC0\x03" +
		"\x02\x02\x02\xC3\xC2\x03\x02\x02\x02\xC4<\x03\x02\x02\x02\xC5\xC7\x07" +
		"g\x02\x02\xC6\xC8\t\x03\x02\x02\xC7\xC6\x03\x02\x02\x02\xC7\xC8\x03\x02" +
		"\x02\x02\xC8\xCA\x03\x02\x02\x02\xC9\xCB\x05? \x02\xCA\xC9\x03\x02\x02" +
		"\x02\xCB\xCC\x03\x02\x02\x02\xCC\xCA\x03\x02\x02\x02\xCC\xCD\x03\x02\x02" +
		"\x02\xCD>\x03\x02\x02\x02\xCE\xCF\t\x04\x02\x02\xCF@\x03\x02\x02\x02\xD0" +
		"\xD1\t\x05\x02\x02\xD1B\x03\x02\x02\x02\xD2\xD6\x05E#\x02\xD3\xD5\x05" +
		"G$\x02\xD4\xD3\x03\x02\x02\x02\xD5\xD8\x03\x02\x02\x02\xD6\xD4\x03\x02" +
		"\x02\x02\xD6\xD7\x03\x02\x02\x02\xD7D\x03\x02\x02\x02\xD8\xD6\x03\x02" +
		"\x02\x02\xD9\xDC\x05A!\x02\xDA\xDC\x05\x1B\x0E\x02\xDB\xD9\x03\x02\x02" +
		"\x02\xDB\xDA\x03\x02\x02\x02\xDCF\x03\x02\x02\x02\xDD\xE1\x05A!\x02\xDE" +
		"\xE1\x05? \x02\xDF\xE1\x05\x1B\x0E\x02\xE0\xDD\x03\x02\x02\x02\xE0\xDE" +
		"\x03\x02\x02\x02\xE0\xDF\x03\x02\x02\x02\xE1H\x03\x02\x02\x02\x14\x02" +
		"s\x7F\x95\x9F\xA7\xAB\xB0\xB5\xBB\xBE\xC0\xC3\xC7\xCC\xD6\xDB\xE0\x03" +
		"\x02\x03\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!NameStringExpressionGrammarLexer.__ATN) {
			NameStringExpressionGrammarLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(NameStringExpressionGrammarLexer._serializedATN));
		}

		return NameStringExpressionGrammarLexer.__ATN;
	}

}

